version: 2.1

orbs:
  slack: circleci/slack@4.1.1


#commands:
#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      # Add parameter here
#    steps:
#      - run:
#          name: Destroy environments
#          when: on_fail
#          command: |
#            # Your code here
#            exit 1
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      # Add parameter here
#    steps:
#      - run:
#          name: Revert migrations
#          # Add when this will run
#          command: |
#            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 ));
#            then
#            #  cd ~/project/backend
#            #  npm install
#            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi
#

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            ls
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [ frontend-build ]
      - run:
          name: Test Front End
          command: |
            ls
            ls frontend/node_modules
            cd frontend
            npm install request
            npm run test
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Test back End
          command: |
            ls
            cd backend
            npm install request
            npm run test

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Analyze Frontend
          command: |

            cd frontend
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Analyze Backend
          command: |

            cd backend
            npm audit --audit-level=critical

      - slack/notify:
          event: fail
          channel: general
          template: basic_fail_1

  deploy-infrastructure:

    parameters:
      backend-stack-name:
        default: project3-back-end
        type: string
      frontend-stack-name:
        default: project3-front-end
        type: string
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Set Up
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project3-back-end \
              --stack-name project3-back-end-${CIRCLE_WORKFLOW_ID}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project3-front-end \
              --stack-name project3-front-end-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

      - run:
          name: create inventory file
          command: echo [web] >> inventory.txt

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation wait stack-create-complete --stack-name << parameters.backend-stack-name >>-${CIRCLE_WORKFLOW_ID} --region=us-west-2
            aws ec2 describe-instances --region=us-west-2 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/inventory.txt

      - run:
          name: take a look
          command: |
            ls
      - run:
          name: delete stack on fail
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>-${CIRCLE_WORKFLOW_ID} --region=us-west-2
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>-${CIRCLE_WORKFLOW_ID} --region=us-west-2

#      - slack/notify:
#          event: fail
#          channel: general
#          template: basic_fail_1


#       Here's where you will add some code to rollback on failure



  configure-infrastructure:
    parameters:
      ansible_ssh_retries:
        default: 5
        type: integer
      ansible-key-checking:
        default: False
        type: boolean
    docker:
      - image: circleci/node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "42:92:62:d5:3e:0b:48:52:4d:ba:39:70:ac:0c:09:eb"
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Disable Host Key Checking
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=false && export ANSIBLE_SSH_RETRIES=5
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            ls
            ansible-playbook -v -i -e inventory.txt .circleci/ansible/roles/configure-server/tasks/configure-server.yml
#      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install ansible
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "42:92:62:d5:3e:0b:48:52:4d:ba:39:70:ac:0c:09:eb"
      - attach_workspace:
          at: ~/
      - run:
          name: Save Workdflow ID
          command: |
            printf ${CIRCLE_WORKFLOW_ID} > .circleci/ansible/roles/deploy-backend/files/wid.txt
            cat .circleci/ansible/roles/deploy-backend/files/wid.txt
      - run:
          name: disable ansible key checking
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=false && export ANSIBLE_SSH_RETRIES=5
      - run:
          name: Run migrations
          command: |
            ls
             ansible-playbook -v -i -e  inventory.txt .circleci/ansible/roles/deploy-backend/tasks/deploy-backend.yml
      - run:
          name: Check if migration successful
          command: |
            curl -H "token: 7cb66ce8-9b24-4bbd-9b69-31b5ca339fc1" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}






     # Here's where you will add some code to rollback on failure
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]